import random

class Cab:
    def __init__(self, id, location):
        self.id = id
        self.location = location
        self.available = True

class Passenger:
    def __init__(self, id, location, destination):
        self.id = id
        self.location = location
        self.destination = destination

class Trip:
    def __init__(self, passenger, cab):
        self.passenger = passenger
        self.cab = cab
        self.distance = self.calculate_distance()

    def calculate_distance(self):
        # Placeholder for distance calculation
        return random.randint(1, 10)

class CabAllocationSystem:
    def __init__(self):
        self.cabs = [Cab(i, random.randint(1, 10)) for i in range(1, 6)]
        self.passengers = [Passenger(i, random.randint(1, 10), random.randint(1, 10)) for i in range(1, 6)]
    
    def allocate_cab(self):
        available_cabs = [cab for cab in self.cabs if cab.available]
        if not available_cabs or not self.passengers:
            print("No available cabs or passengers")
            return
        
        passenger = self.passengers.pop(0)
        cab = min(available_cabs, key=lambda x: abs(x.location - passenger.location))
        cab.available = False
        trip = Trip(passenger, cab)
        print(f"Allocated Cab {cab.id} to Passenger {passenger.id} for trip of distance {trip.distance} units.")

    def simulate(self, num_trips):
        for _ in range(num_trips):
            self.allocate_cab()

if __name__ == "__main__":
    cab_system = CabAllocationSystem()
    cab_system.simulate(5)  # Simulate 5 trips
